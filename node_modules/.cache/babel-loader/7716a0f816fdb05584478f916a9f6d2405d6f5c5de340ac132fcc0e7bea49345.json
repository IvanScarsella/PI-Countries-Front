{"ast":null,"code":"import axios from \"axios\";\nexport const GET_COUNTRIES = \"GET_COUNTRIES\";\nexport const GET_BY_NAME = \"GET_BY_NAME\";\nexport const GET_COUNTRY_DETAIL = \"GET_COUNTRY_DETAIL\";\nexport const CLEAR_DETAIL = \"CLEAR_DETAIL\";\nexport const GET_CURRENT_PAGES = \"GET_CURRENT_PAGES\";\nexport const INCREASE_PAGE = \"INCREASE_PAGE\";\nexport const DECREASE_PAGE = \"DECREASE_PAGE\";\nexport const CHANGE_PAGE = \"CHANGE_PAGE\";\nexport const RESTART_CURRENT_PAGE = \"RESTART_CURRENT_PAGE\";\nexport const FILTER_CHANGE_VALUE = \"FILTER_CHANGE_VALUE\";\nexport const FILTER_COUNTRIES = \"FILTER_COUNTRIES\";\nexport const CLEAR_FILTERS = \"CLEAR_FILTERS\";\nexport const GET_ACTIVITIES = \"GET_ACTIVITIES\";\nexport const CREATE_ACTIVITY = \"CREATE_ACTIVITY\";\nexport const GET_CONTINENTS = \"GET_CONTINENTS\";\nexport function getCountries() {\n  return async function (dispatch) {\n    try {\n      const response = await axios.get(\"http://localhost:3001/countries/all\");\n      let continents = [];\n      console.log(response.data);\n      response.data.forEach(country => {\n        continents.push(country.continent);\n      });\n      let allContinents = [];\n      continents.forEach(continent => {\n        if (allContinents.includes(continent)) allContinents.push(continent);\n      });\n      return dispatch({\n        type: GET_COUNTRIES,\n        payload: response.data,\n        payload2: allContinents\n      });\n    } catch (error) {\n      console.log(error);\n      throw new Error('No se pudieron obtener los países');\n    }\n  };\n}\nexport function getByName(name) {\n  return async function (dispatch) {\n    try {\n      const response = await axios(`http://localhost:3001/countries/all?search=${name}`);\n      return dispatch({\n        type: GET_BY_NAME,\n        payload: response.data\n      });\n    } catch (error) {\n      console.log(error);\n      throw new Error('No se encontró el país solicitado');\n    }\n  };\n}\nexport function getCountryDetail(id) {\n  return async function (dispatch) {\n    try {\n      if (id) {\n        const response = await axios.get(`http://localhost:3001/countries/${id}`);\n        dispatch({\n          type: GET_COUNTRY_DETAIL,\n          payload: response.data\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}\nexport function clearDetail() {\n  return async function (dispatch) {\n    return dispatch({\n      type: CLEAR_DETAIL,\n      payload: {}\n    });\n  };\n}\nexport function getCurrentPages(currentCountries) {\n  try {\n    if (currentCountries) {\n      let countries = currentCountries;\n      let max = Math.ceil(countries.length / 10);\n      let slicedCountries = [[1, countries.slice(0, 10)]];\n      let i = 2;\n      while (max > 1) {\n        slicedCountries.push([i, countries.slice(20 * (i - 1), 20 * i)]);\n        i++;\n        max--;\n      }\n      return {\n        type: GET_CURRENT_PAGES,\n        payload: slicedCountries\n      };\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function restartCurrentPage(allCountries) {\n  return async function (dispatch) {\n    try {\n      if (allCountries) {\n        const countries = await getCurrentPages(allCountries).payload;\n        return dispatch({\n          type: RESTART_CURRENT_PAGE,\n          payload: countries\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}\nexport const filterCountries = (allCountries, _ref) => {\n  let {\n    continent,\n    activity,\n    order\n  } = _ref;\n  const results = getFilteredCountries(allCountries, {\n    continent,\n    activity,\n    order\n  });\n  const passToPages = getCurrentPages(results).payload;\n  return {\n    type: FILTER_COUNTRIES,\n    payload: passToPages\n  };\n};\nfunction getFilteredCountries(allCountries, _ref2) {\n  let {\n    continent,\n    activity,\n    order\n  } = _ref2;\n  let results = [...allCountries];\n  if (continent) {\n    // let countriesFiltered = [];\n    let filterByContinent = results.filter(country => country.continent === continent);\n    // let flag = false;\n    // country.continent.forEach(c => {\n    //     const some = c === continent\n    //     if (some) flag = true\n    // })\n    // if (flag) return country\n    // else return null\n\n    results = filterByContinent;\n  }\n  // if (genre) {\n  //     let filterByGenre = results.filter(game => {\n  //         let flag = false\n  //         game.genres.forEach(g => {\n  //             const some = g === genre\n  //             if (some) flag = true\n  //         })\n  //         if (flag) return game\n  //         else return null\n  //     })\n  //     results = filterByGenre\n  // }\n\n  // //filtrar por plataforma\n  // if (platform) {\n  //     let filterByPlatform = results.filter(game => {\n  //         let flag = false\n  //         game.platforms.forEach(p => {\n  //             const some = p === platform\n  //             if (some) flag = true\n  //         })\n  //         if (flag) return game\n  //         else return null\n  //     })\n  //     results = filterByPlatform\n  // }\n\n  // //orden\n  // if (order) {\n  //     switch (order) {\n  //         case \"max-min\":\n  //             results = results.sort((a, b) => b.rating - a.rating);\n  //             break;\n  //         case \"min-max\":\n  //             results = results.sort((a, b) => a.rating - b.rating);\n  //             break;\n  //         case \"A-Z\":\n  //             results = results.sort((a, b) => a.name.localeCompare(b.name))\n  //             break;\n  //         case \"Z-A\":\n  //             results = results.sort((a, b) => b.name.localeCompare(a.name))\n  //             break;\n  //         default:\n  //             break;\n  //     }\n  // }\n\n  // //origen\n  // if (originData) {\n  //     switch (originData) {\n  //         case \"all\":\n  //             results = allGames\n  //             break;\n  //         case \"db\":\n  //             results = results.filter(game => {\n  //                 if (game?.id?.toString().length > 10) return game\n  //                 return null\n  //             })\n  //             break;\n  //         case \"api\":\n  //             results = results.filter(game => {\n  //                 if (game.id.toString().length < 10) return game\n  //                 return null\n  //             })\n  //             break;\n  //         default:\n  //             break;\n  //     }\n  // }\n\n  return results;\n}\nexport function changePage(page) {\n  return {\n    type: CHANGE_PAGE,\n    payload: page\n  };\n}\nexport function increasePage() {\n  return {\n    type: INCREASE_PAGE\n  };\n}\nexport function decreasePage() {\n  return {\n    type: DECREASE_PAGE\n  };\n}\nexport const filterChangeValue = (property, value) => {\n  return {\n    type: FILTER_CHANGE_VALUE,\n    payload: {\n      property,\n      value\n    }\n  };\n};\nexport const clearFilters = () => {\n  return {\n    type: CLEAR_FILTERS\n  };\n};\nexport function getActivities() {\n  return async function (dispatch) {\n    try {\n      const response = await axios.get(\"http://localhost:3001/activities\");\n      return dispatch({\n        type: GET_ACTIVITIES,\n        payload: response.data\n      });\n    } catch (error) {\n      console.log(error);\n      throw new Error('No se pudieron obtener las actividades');\n    }\n  };\n}\nexport function createActivity(data) {\n  return async dispatch => {\n    try {\n      await axios.post(`http://localhost:3001/activities/`, data).then(result => {\n        return dispatch({\n          type: CREATE_ACTIVITY,\n          payload: result\n        });\n      });\n    } catch (error) {\n      console.log(error.message);\n      throw new Error('No se ha podido crear la actividad');\n    }\n  };\n}\nexport function getContinents(allCountries) {\n  return async function (dispatch) {\n    try {\n      let countries = [...allCountries];\n      // const countries = await getCountries();\n      // const countries = await axios.get(\"http://localhost:3001/countries/all\")\n      // const continents = countries.data;\n      console.log(countries);\n      // if (countries){\n      let continents = [];\n      countries.forEach(country => {\n        continents.push(country.continent);\n      });\n      let allContinents = [];\n      continents.forEach(continent => {\n        if (allContinents.includes(continent)) allContinents.push(continent);\n      });\n      return dispatch({\n        type: GET_CONTINENTS,\n        payload: allContinents\n      });\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n}","map":{"version":3,"names":["axios","GET_COUNTRIES","GET_BY_NAME","GET_COUNTRY_DETAIL","CLEAR_DETAIL","GET_CURRENT_PAGES","INCREASE_PAGE","DECREASE_PAGE","CHANGE_PAGE","RESTART_CURRENT_PAGE","FILTER_CHANGE_VALUE","FILTER_COUNTRIES","CLEAR_FILTERS","GET_ACTIVITIES","CREATE_ACTIVITY","GET_CONTINENTS","getCountries","dispatch","response","get","continents","console","log","data","forEach","country","push","continent","allContinents","includes","type","payload","payload2","error","Error","getByName","name","getCountryDetail","id","clearDetail","getCurrentPages","currentCountries","countries","max","Math","ceil","length","slicedCountries","slice","i","restartCurrentPage","allCountries","filterCountries","_ref","activity","order","results","getFilteredCountries","passToPages","_ref2","filterByContinent","filter","changePage","page","increasePage","decreasePage","filterChangeValue","property","value","clearFilters","getActivities","createActivity","post","then","result","message","getContinents"],"sources":["H:/Programación/Henry/PI-Countries/PI-Countries-main/PI-Countries-main/client/src/redux/actions/actions.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nexport const GET_COUNTRIES = \"GET_COUNTRIES\";\r\nexport const GET_BY_NAME = \"GET_BY_NAME\";\r\nexport const GET_COUNTRY_DETAIL = \"GET_COUNTRY_DETAIL\";\r\nexport const CLEAR_DETAIL = \"CLEAR_DETAIL\";\r\nexport const GET_CURRENT_PAGES = \"GET_CURRENT_PAGES\";\r\nexport const INCREASE_PAGE = \"INCREASE_PAGE\";\r\nexport const DECREASE_PAGE = \"DECREASE_PAGE\";\r\nexport const CHANGE_PAGE = \"CHANGE_PAGE\";\r\nexport const RESTART_CURRENT_PAGE = \"RESTART_CURRENT_PAGE\";\r\nexport const FILTER_CHANGE_VALUE = \"FILTER_CHANGE_VALUE\";\r\nexport const FILTER_COUNTRIES = \"FILTER_COUNTRIES\";\r\nexport const CLEAR_FILTERS = \"CLEAR_FILTERS\";\r\nexport const GET_ACTIVITIES = \"GET_ACTIVITIES\";\r\nexport const CREATE_ACTIVITY = \"CREATE_ACTIVITY\";\r\nexport const GET_CONTINENTS = \"GET_CONTINENTS\";\r\n\r\nexport function getCountries() {\r\n    return async function (dispatch) {\r\n        try {\r\n            const response = await axios.get(\"http://localhost:3001/countries/all\");\r\n            let continents = [];\r\n            console.log(response.data);\r\n            response.data.forEach(country => {\r\n                continents.push(country.continent)\r\n            });\r\n            let allContinents = [];\r\n            continents.forEach(continent => {\r\n                if (allContinents.includes(continent))\r\n                allContinents.push(continent)\r\n            })\r\n            return dispatch({\r\n                type: GET_COUNTRIES,\r\n                payload: response.data,\r\n                payload2: allContinents\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            throw new Error('No se pudieron obtener los países')\r\n        }\r\n    }\r\n}\r\n\r\nexport function getByName(name) {\r\n    return async function (dispatch) {\r\n        try {\r\n            const response = await axios(`http://localhost:3001/countries/all?search=${name}`);\r\n            return dispatch({\r\n                type: GET_BY_NAME,\r\n                payload: response.data\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw new Error('No se encontró el país solicitado')\r\n        }\r\n    }\r\n}\r\n\r\nexport function getCountryDetail(id) {\r\n    return async function (dispatch) {\r\n        try {\r\n            if (id) {\r\n                const response = (await axios.get(`http://localhost:3001/countries/${id}`));\r\n                dispatch({\r\n                    type: GET_COUNTRY_DETAIL,\r\n                    payload: response.data\r\n                })\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n}\r\n\r\nexport function clearDetail() {\r\n    return async function (dispatch) {\r\n        return dispatch({\r\n            type: CLEAR_DETAIL,\r\n            payload: {}\r\n        })\r\n    }\r\n}\r\n\r\nexport function getCurrentPages(currentCountries) {\r\n    try {\r\n        if (currentCountries) {\r\n            let countries = currentCountries\r\n            let max = Math.ceil(countries.length / 10)\r\n\r\n            let slicedCountries = [[1, countries.slice(0, 10)]]\r\n            let i = 2\r\n\r\n            while (max > 1) {\r\n                slicedCountries.push([i, countries.slice(20 * (i - 1), 20 * i)])\r\n                i++\r\n                max--\r\n            }\r\n\r\n            return ({\r\n                type: GET_CURRENT_PAGES,\r\n                payload: slicedCountries\r\n            })\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport function restartCurrentPage(allCountries) {\r\n    return async function (dispatch) {\r\n        try {\r\n            if (allCountries) {\r\n                const countries = await getCurrentPages(allCountries).payload\r\n                return dispatch({\r\n                    type: RESTART_CURRENT_PAGE,\r\n                    payload: countries\r\n                })\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}\r\n\r\nexport const filterCountries = (allCountries, { continent, activity, order }) => {\r\n\r\n    const results = getFilteredCountries(allCountries, { continent, activity, order })\r\n\r\n    const passToPages = getCurrentPages(results).payload\r\n\r\n    return {\r\n        type: FILTER_COUNTRIES,\r\n        payload: passToPages\r\n    }\r\n}\r\n\r\nfunction getFilteredCountries(allCountries, { continent, activity, order }) {\r\n    let results = [...allCountries]\r\n\r\n\r\n    if (continent) {\r\n        // let countriesFiltered = [];\r\n        let filterByContinent = results.filter(country =>\r\n            country.continent === continent\r\n        )\r\n        // let flag = false;\r\n        // country.continent.forEach(c => {\r\n        //     const some = c === continent\r\n        //     if (some) flag = true\r\n        // })\r\n        // if (flag) return country\r\n        // else return null\r\n\r\n        results = filterByContinent\r\n    }\r\n    // if (genre) {\r\n    //     let filterByGenre = results.filter(game => {\r\n    //         let flag = false\r\n    //         game.genres.forEach(g => {\r\n    //             const some = g === genre\r\n    //             if (some) flag = true\r\n    //         })\r\n    //         if (flag) return game\r\n    //         else return null\r\n    //     })\r\n    //     results = filterByGenre\r\n    // }\r\n\r\n    // //filtrar por plataforma\r\n    // if (platform) {\r\n    //     let filterByPlatform = results.filter(game => {\r\n    //         let flag = false\r\n    //         game.platforms.forEach(p => {\r\n    //             const some = p === platform\r\n    //             if (some) flag = true\r\n    //         })\r\n    //         if (flag) return game\r\n    //         else return null\r\n    //     })\r\n    //     results = filterByPlatform\r\n    // }\r\n\r\n    // //orden\r\n    // if (order) {\r\n    //     switch (order) {\r\n    //         case \"max-min\":\r\n    //             results = results.sort((a, b) => b.rating - a.rating);\r\n    //             break;\r\n    //         case \"min-max\":\r\n    //             results = results.sort((a, b) => a.rating - b.rating);\r\n    //             break;\r\n    //         case \"A-Z\":\r\n    //             results = results.sort((a, b) => a.name.localeCompare(b.name))\r\n    //             break;\r\n    //         case \"Z-A\":\r\n    //             results = results.sort((a, b) => b.name.localeCompare(a.name))\r\n    //             break;\r\n    //         default:\r\n    //             break;\r\n    //     }\r\n    // }\r\n\r\n    // //origen\r\n    // if (originData) {\r\n    //     switch (originData) {\r\n    //         case \"all\":\r\n    //             results = allGames\r\n    //             break;\r\n    //         case \"db\":\r\n    //             results = results.filter(game => {\r\n    //                 if (game?.id?.toString().length > 10) return game\r\n    //                 return null\r\n    //             })\r\n    //             break;\r\n    //         case \"api\":\r\n    //             results = results.filter(game => {\r\n    //                 if (game.id.toString().length < 10) return game\r\n    //                 return null\r\n    //             })\r\n    //             break;\r\n    //         default:\r\n    //             break;\r\n    //     }\r\n    // }\r\n\r\n    return results\r\n}\r\n\r\nexport function changePage(page) {\r\n    return {\r\n        type: CHANGE_PAGE,\r\n        payload: page\r\n    }\r\n}\r\n\r\nexport function increasePage() {\r\n    return {\r\n        type: INCREASE_PAGE\r\n    }\r\n}\r\n\r\nexport function decreasePage() {\r\n    return {\r\n        type: DECREASE_PAGE\r\n    }\r\n}\r\n\r\nexport const filterChangeValue = (property, value) => {\r\n    return {\r\n        type: FILTER_CHANGE_VALUE,\r\n        payload: { property, value }\r\n    }\r\n}\r\nexport const clearFilters = () => {\r\n    return {\r\n        type: CLEAR_FILTERS\r\n    }\r\n}\r\n\r\nexport function getActivities() {\r\n    return async function (dispatch) {\r\n        try {\r\n            const response = await axios.get(\"http://localhost:3001/activities\");\r\n            return dispatch({\r\n                type: GET_ACTIVITIES,\r\n                payload: response.data\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            throw new Error('No se pudieron obtener las actividades')\r\n        }\r\n    }\r\n}\r\n\r\nexport function createActivity(data) {\r\n    return async (dispatch) => {\r\n        try {\r\n            await axios.post(`http://localhost:3001/activities/`, data).then((result) => {\r\n                return dispatch({\r\n                    type: CREATE_ACTIVITY,\r\n                    payload: result\r\n                })\r\n            })\r\n        } catch (error) {\r\n            console.log(error.message)\r\n            throw new Error('No se ha podido crear la actividad')\r\n        }\r\n    }\r\n}\r\n\r\nexport function getContinents(allCountries) {\r\n    return async function (dispatch) {\r\n        try {\r\n            let countries = [...allCountries];\r\n            // const countries = await getCountries();\r\n            // const countries = await axios.get(\"http://localhost:3001/countries/all\")\r\n            // const continents = countries.data;\r\n            console.log(countries);\r\n            // if (countries){\r\n            let continents = [];\r\n            countries.forEach(country => {\r\n                continents.push(country.continent)\r\n            });\r\n            let allContinents = [];\r\n            continents.forEach(continent => {\r\n                if (allContinents.includes(continent))\r\n                allContinents.push(continent)\r\n            })\r\n            return dispatch({\r\n                type: GET_CONTINENTS,\r\n                payload: allContinents\r\n            })\r\n        } catch (error) {\r\n            console.log(error.message);\r\n        }\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}